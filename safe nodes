class Solution {
public:
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        vector<vector<int>> revAdj(V);
        vector<int> inDegree(V, 0);
        
        for (int i = 0; i < V; i++) {
            for (int node : adj[i]) {
                revAdj[node].push_back(i);
                inDegree[i]++;
            }
        }
        
        queue<int> q;
        vector<int> list;
        
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                q.push(i);
            }
        }
        
        while (!q.empty()) {
            int curr = q.front();
            q.pop();
            list.push_back(curr);
            
            for (int nbr : revAdj[curr]) {
                inDegree[nbr]--;
                if (inDegree[nbr] == 0) {
                    q.push(nbr);
                }
            }
        }
        
        sort(list.begin(), list.end());
        return list;
    }
};
